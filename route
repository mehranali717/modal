import React from 'react';

const MaintenancePageConfig = {
	settings: {
		layout: {
			config: {}
		}
	},
	routes: [
		{
			path: '/maintenance',
			exact: true,
			component: React.lazy(() => import('./MaintenancePage'))
		}
	]
};

export default MaintenancePageConfig;


const routeConfigs = [
	// COMMON
	MaintenancePageConfig,
	ComingSoonPageConfig,
	ConfirmationPageConfig,
	ErrorPageConfig,
	ReceiptPageConfig,
	LegalPageConfig,
	Error500PageConfig,
	AboutPageConfig,
	ConfirmManagerErrorPageConfig,
	// only render either Admin or Public/Manager/Onboarding pages based on domain
	...(licenseGroupDomain
		? [
				// ADMIN
				WorkflowsPageConfig,
				DashboardPageConfig,
				UsersPageConfig,
				DevicesPageConfig,
				FormsPageConfig,
				LogsPageConfig,
				RolesPageConfig,
				SettingsPageConfig,
				SubscriptionDetailsPageConfig,
				AdminProfilePageConfig,
				InvitePageConfig,
				AccountPageConfig,
				SuccessPageConfig,
				AdminContactUsPageConfig,
				HomePageConfig,
				InboxPageConfig,
				JobQueuePageConfig,
				JobQueueManagementPageConfig,
				TrackerPageConfig,
				JobsPageConfig,
				JobPageConfig,
				InputPageConfig
				// ReportsPageConfig,
		  ]
		: [
				// PUBLIC
				WelcomePageConfig,
				AboutScanTripCloudConfig,
				AboutStratusConfig,
				FeaturesPageConfig,
				PublicProfilePageConfig,
				// MANAGER
				ManagerDashboardPageConfig,
				ManagedLicenseGroupsPageConfig,
				TenantReportsPageConfig,
				// ONBOARDING
				OnboardingPageConfig,
				PublicContactUsPageConfig
		  ])
];

const routes = [
	...FuseUtils.generateRoutesFromConfigs(routeConfigs),
	{
		path: '/',
		exact: true,
		component: () => <Root />
	},
	{
		path: '/admin',
		exact: true,
		component: () => <Root />
	},
	{
		component: React.lazy(() => import('app/main/error404/Error404Page'))
	}
];

export default routes;





	static setRoutes(config, defaultAuth) {
		let routes = [...config.routes];

		routes = routes.map(route => {
			let auth = config.auth || config.auth === null ? config.auth : defaultAuth || null;
			auth = route.auth || route.auth === null ? route.auth : auth;
			const settings = _.merge({}, config.settings, route.settings);

			return {
				...route,
				settings,
				auth
			};
		});

		return [...routes];
	}

	static generateRoutesFromConfigs(configs, defaultAuth) {
		let allRoutes = [];
		configs.forEach(config => {
			allRoutes = [...allRoutes, ...this.setRoutes(config, defaultAuth)];
		});
		return allRoutes;
	}