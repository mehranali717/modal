import React from 'react';

const MaintenancePageConfig = {
	settings: {
		layout: {
			config: {}
		}
	},
	routes: [
		{
			path: '/maintenance',
			exact: true,
			component: React.lazy(() => import('./MaintenancePage'))
		}
	]
};

export default MaintenancePageConfig;


const routeConfigs = [
	// COMMON
	MaintenancePageConfig,
	ComingSoonPageConfig,
	ConfirmationPageConfig,
	ErrorPageConfig,
	ReceiptPageConfig,
	LegalPageConfig,
	Error500PageConfig,
	AboutPageConfig,
	ConfirmManagerErrorPageConfig,
	// only render either Admin or Public/Manager/Onboarding pages based on domain
	...(licenseGroupDomain
		? [
				// ADMIN
				WorkflowsPageConfig,
				DashboardPageConfig,
				UsersPageConfig,
				DevicesPageConfig,
				FormsPageConfig,
				LogsPageConfig,
				RolesPageConfig,
				SettingsPageConfig,
				SubscriptionDetailsPageConfig,
				AdminProfilePageConfig,
				InvitePageConfig,
				AccountPageConfig,
				SuccessPageConfig,
				AdminContactUsPageConfig,
				HomePageConfig,
				InboxPageConfig,
				JobQueuePageConfig,
				JobQueueManagementPageConfig,
				TrackerPageConfig,
				JobsPageConfig,
				JobPageConfig,
				InputPageConfig
				// ReportsPageConfig,
		  ]
		: [
				// PUBLIC
				WelcomePageConfig,
				AboutScanTripCloudConfig,
				AboutStratusConfig,
				FeaturesPageConfig,
				PublicProfilePageConfig,
				// MANAGER
				ManagerDashboardPageConfig,
				ManagedLicenseGroupsPageConfig,
				TenantReportsPageConfig,
				// ONBOARDING
				OnboardingPageConfig,
				PublicContactUsPageConfig
		  ])
];

const routes = [
	...FuseUtils.generateRoutesFromConfigs(routeConfigs),
	{
		path: '/',
		exact: true,
		component: () => <Root />
	},
	{
		path: '/admin',
		exact: true,
		component: () => <Root />
	},
	{
		component: React.lazy(() => import('app/main/error404/Error404Page'))
	}
];

export default routes;





	static setRoutes(config, defaultAuth) {
		let routes = [...config.routes];

		routes = routes.map(route => {
			let auth = config.auth || config.auth === null ? config.auth : defaultAuth || null;
			auth = route.auth || route.auth === null ? route.auth : auth;
			const settings = _.merge({}, config.settings, route.settings);

			return {
				...route,
				settings,
				auth
			};
		});

		return [...routes];
	}

	static generateRoutesFromConfigs(configs, defaultAuth) {
		let allRoutes = [];
		configs.forEach(config => {
			allRoutes = [...allRoutes, ...this.setRoutes(config, defaultAuth)];
		});
		return allRoutes;
	}


////layoutes


import { useDeepCompareEffect } from '@fuse/hooks';
import FuseLayouts from '@fuse/layouts/FuseLayouts';
import _ from '@lodash';
import { makeStyles } from '@material-ui/core/styles';
import AppContext from 'app/AppContext';
import * as Actions from 'app/store/actions';
import { generateSettings } from 'app/store/reducers/fuse/settings.reducer';
import React, { useContext, useMemo, useCallback, useRef } from 'react';
import { useDispatch, useSelector } from 'app/modules/react-redux';
import { matchRoutes } from 'react-router-config';
import { useLocation } from 'react-router-dom';
import * as Velocity from 'velocity-animate';
import { defaults as Chartjs2Defaults } from 'react-chartjs-2';

const useStyles = makeStyles(theme => ({
	'@global': {
		'code:not([class*="language-"])': {
			color: theme.palette.secondary.dark,
			backgroundColor: theme.palette.type === 'light' ? 'rgba(255, 255, 255, .9)' : 'rgba(0, 0, 0, .9)',
			padding: '2px 3px',
			borderRadius: 2,
			lineHeight: 1.7
		},
		'table.simple tbody tr td': {
			borderColor: theme.palette.divider
		},
		'table.simple thead tr th': {
			borderColor: theme.palette.divider
		},
		'a:not([role=button])': {
			color: theme.palette.secondary.main,
			textDecoration: 'none',
			'&:hover': {
				textDecoration: 'underline'
			}
		},
		'[class^="border-"]': {
			borderColor: theme.palette.divider
		},
		'[class*="border-"]': {
			borderColor: theme.palette.divider
		},
		hr: {
			borderColor: theme.palette.divider
		}
	},
	root: {
		color: theme.palette.text.primary
	}
}));

function FuseLayout(props) {
	const dispatch = useDispatch();
	const settings = useSelector(({ fuse }) => fuse.settings.current);
	const defaultSettings = useSelector(({ fuse }) => fuse.settings.defaults);
	const appContext = useContext(AppContext);
	const { routes } = appContext;
	const classes = useStyles(props);
	const location = useLocation();
	const { pathname } = location;
	const matched = matchRoutes(routes, pathname)[0];
	const newSettings = useRef(null);

	const shouldAwaitRender = useCallback(() => {
		let _newSettings;
		/**
		 * On Path changed
		 */
		// if (prevPathname !== pathname) {
		if (matched && matched.route.settings) {
			/**
			 * if matched route has settings
			 */

			const routeSettings = matched.route.settings;

			_newSettings = generateSettings(defaultSettings, routeSettings);
		} else if (!_.isEqual(newSettings.current, defaultSettings)) {
			/**
			 * Reset to default settings on the new path
			 */
			_newSettings = _.merge({}, defaultSettings);
		} else {
			_newSettings = newSettings.current;
		}

		if (!_.isEqual(newSettings.current, _newSettings)) {
			newSettings.current = _newSettings;
		}

		function AnimationToggle(_settings) {
			if (!_settings.animations) {
				document.body.classList.add('no-animate');
				Velocity.mock = true;
				Chartjs2Defaults.global.animation.duration = 0;
				Chartjs2Defaults.global.hover.animationDuration = 0;
			} else {
				document.body.classList.remove('no-animate');
				Velocity.mock = false;
				Chartjs2Defaults.global.animation.duration = 1000;
				Chartjs2Defaults.global.hover.animationDuration = 400;
			}
		}

		AnimationToggle(_newSettings);
	}, [defaultSettings, matched]);

	shouldAwaitRender();

	useDeepCompareEffect(() => {
		if (!_.isEqual(newSettings.current, settings)) {
			dispatch(Actions.setSettings(newSettings.current));
		}
	}, [dispatch, newSettings.current, settings]);

	// console.warn('::FuseLayout:: rendered');
	const Layout = useMemo(() => FuseLayouts[settings.layout.style], [settings.layout.style]);

	return _.isEqual(newSettings.current, settings) ? <Layout classes={{ root: classes.root }} {...props} /> : null;
}

export default React.memo(FuseLayout);


	///setting reducer

	import {
		defaultSettings,
		defaultThemes,
		extendThemeWithMixins,
		getParsedQuerySettings,
		mainThemeVariations,
		mustHaveThemeOptions
	} from '@fuse/default-settings';
	import _ from '@lodash';
	import { createMuiTheme } from '@material-ui/core/styles';
	import FuseSettingsConfig from 'app/fuse-configs/settingsConfig';
	import FuseThemesConfig from 'app/fuse-configs/themesConfig';
	import FuseLayoutConfigs from 'app/fuse-layouts/FuseLayoutConfigs';
	import * as Actions from 'app/store/actions/fuse';
	import * as muiLocales from '@material-ui/core/locale';
	
	const themesObjRaw = Object.keys(FuseThemesConfig).length !== 0 ? FuseThemesConfig : defaultThemes;
	const initialSettings = getInitialSettings();
	const initialThemes = getInitialThemes();
	
	const initialState = {
		initial: initialSettings,
		defaults: _.merge({}, initialSettings),
		current: _.merge({}, initialSettings),
		themes: initialThemes,
		...getThemeOptions(initialThemes, initialSettings)
	};
	
	const settings = (state = initialState, action) => {
		switch (action.type) {
			case Actions.SET_SETTINGS: {
				const current = generateSettings(state.defaults, action.value);
				const themes =
					current.theme.main !== state.current.theme.main
						? { ...state.themes, ...updateMainThemeVariations(current.theme.main, state.themes) }
						: state.themes;
				return {
					...state,
					current,
					themes,
					...getThemeOptions(themes, current)
				};
			}
			case Actions.SET_INITIAL_SETTINGS: {
				return _.merge({}, initialState);
			}
			case Actions.SET_DEFAULT_SETTINGS: {
				const defaults = generateSettings(state.defaults, action.value);
				const current = _.merge({}, defaults);
				if (action.doNotResetAdminPageSetting) {
					current.layout.config.adminPage = state.current.layout.config.adminPage;
				}
				let themes =
					defaults.theme.main !== state.defaults.theme.main
						? { ...state.themes, ...updateMainThemeVariations(defaults.theme.main, state.themes) }
						: state.themes;
				themes =
					defaults.direction !== state.defaults.direction
						? updateThemeDirections(themes, defaults.direction)
						: themes;
				return {
					...state,
					defaults: _.merge({}, defaults),
					current,
					themes,
					...getThemeOptions(themes, defaults)
				};
			}
			case Actions.RESET_DEFAULT_SETTINGS: {
				const themes = {
					...state.themes,
					...updateMainThemeVariations(state.defaults.theme.main, state.themes)
				};
				return {
					...state,
					defaults: _.merge({}, state.defaults),
					current: _.merge({}, state.defaults),
					themes,
					...getThemeOptions(themes, state.defaults)
				};
			}
			default: {
				return state;
			}
		}
	};
	
	export default settings;
	
	/**
	 * SETTINGS
	 */
	function getInitialSettings() {
		const defaultLayoutStyle =
			FuseSettingsConfig.layout && FuseSettingsConfig.layout.style ? FuseSettingsConfig.layout.style : 'layout1';
		const layout = {
			style: defaultLayoutStyle,
			config: FuseLayoutConfigs[defaultLayoutStyle].defaults
		};
		return _.merge({}, defaultSettings, { layout }, FuseSettingsConfig, getParsedQuerySettings());
	}
	
	/**
	 * THEMES
	 */
	function getInitialThemes() {
		const { direction } = initialSettings;
		// HACK::import language based off full locale
		const locale = (() => {
			const [language, region] = (window.navigator.language || 'en-US').split('-');
			// HACK::if browser only has a language, find any applicable locale
			const formattedLocale = region
				? `${language.toLowerCase()}${region.toUpperCase()}`
				: Object.keys(muiLocales).find(muiLocale => muiLocale.startsWith(language.toLowerCase())) ?? 'enUS';
			return muiLocales[formattedLocale];
		})();
	
		const themes = Object.assign(
			{},
			...Object.entries(themesObjRaw).map(([key, muiTheme]) => {
				return {
					[key]: createMuiTheme(
						_.merge({}, muiTheme, mustHaveThemeOptions(muiTheme), {
							mixins: extendThemeWithMixins(muiTheme),
							direction
						}),
						locale
					)
				};
			})
		);
	
		return {
			...themes,
			...mainThemeVariations({
				...themesObjRaw[initialSettings.theme.main],
				mixins: extendThemeWithMixins(themesObjRaw[initialSettings.theme.main]),
				direction
			})
		};
	}
	
	function updateMainThemeVariations(mainTheme, themes) {
		return mainThemeVariations({
			...themesObjRaw[mainTheme],
			mixins: extendThemeWithMixins(themesObjRaw[mainTheme]),
			direction: themes[mainTheme].direction
		});
	}
	
	function getThemeOptions(_themes, _settings) {
		return {
			mainTheme: _themes[_settings.theme.main],
			navbarTheme: _themes[_settings.theme.navbar],
			toolbarTheme: _themes[_settings.theme.toolbar],
			footerTheme: _themes[_settings.theme.footer],
			...updateMainThemeVariations(_settings.theme.main, _themes)
		};
	}
	
	function updateThemeDirections(themes, direction) {
		const response = {};
		Object.entries(themes).forEach(([key, value]) => {
			response[key] = { ...value, direction };
		});
		return response;
	}
	
	export function generateSettings(_defaultSettings, _newSettings) {
		return _.merge(
			{},
			_defaultSettings,
			_newSettings && _newSettings.layout && _newSettings.layout.style
				? { layout: { config: FuseLayoutConfigs[_newSettings.layout.style].defaults } }
				: {},
			_newSettings
		);
	}
	